## page was renamed from Web2Expo

Some notes from the sessions during the NY Web 2.0 Expo

= Wednesday =

== Keynotes ==

Pretty weak, I'd say! Very little notes to transfer even.

== Lessons Learned from Scaling Social Applications ==

Joshua Schachter describes his experiences... TODO: transfer notes from paper.

== Go REST with Rails (11 - 12) ==

DHH presents a talk on REST. Seems overly opinionated and dramatic.

 * Designing APIs earlier was difficult and unclear...
 * HTTP spec is overly theoretical. GET, POST, etc doesn't really matter
 * Claim: REST and HTTP are intimately connected. REST is acquired taste, but really good

<Insert way too much idle talk about Roy Fielding's academic dissertation.>

 * WS-star is apparently bad (not really clear why though)

<Half way into the talk, still nothing about what REST even is!>

 * Goes into a demo of a rails app, which uses REST
 * My question for DHH: Outside of CRUD, what if I want more specific actions? Do I have to fall back to the old RPC style API? For example: I want photo manipulation API. DHH pre-empted it but waved it as non-critical.
 * RESTful way of creating API: multiple formatting for the same data.
  * Demonstrated ATOM, JSON, XML, HTML versions of the same resource

 * Argues very much about conventions being a good thing.
 * Another question for DHH: What's the current state of REST support in browsers? PUT and DELETE supported?

== Moving Pictures (10 - 11) ==

Cal Henderson presents a talk about video on the web. Likes to cuss, make typos and speak really fast.

Uploading:

 * Upload forms don't really work since videos are big. Two parts:
  1. Client side
   * Forms: easy to implement, ubiquitous. hard to do upload progress, no batch upload, browsers are slow
    * Upload progress is easy with AJAX query. Could have load balancing and multiple non-sticky machines
    * But can still be done with PerlBal (load balancer)
   * Flash: progress is easy, fast, batch upload supported. But hard to implement and not ubiquitous.
   * Desktop App: lots of benefits but hard to develop and deploy. Drag & Drop
  2. Server side
   * Uploads are slow (slower than serving pages)
   * Apache processes are heavy and a waste of resources
   * Can instead use a poll based server (Jetty)
   * Buffering layer: {{{ [Browser] - slow -> [Buffer (PerlBal? mod_proxy?)] - fast -> [Server] }}}
   * Moving files around between servers are also slow - so should be done asynchronously (cf. GearMan)
   
Transcoding:

 * Transcoding puts all videos on equal footing
 * Containers (mov, flv, avi) contain multiple streams in various codecs.
 * Video {{{
Header
Video
Audio
Video
Audio
...
}}}

 * Raw video/audio rarely get used. 30fps of bitmaps or 44khz of sound is a lot

Compression:
 * Intraframe: treat each frame as picture and compress JPEG. Uses DCT (Discrete Cosine Transform)
 * Interframe: missed it

 * Intra coded pictures (key frames): full raw frame
  * Allows easy random seeking
  * Online video usually has relatively few key frames
 * Predicted pictures: based on single ref
 * Bi-predictive pictures: based on two or more ref frames

 * P & B frames contain mix of image data and motion vectors
 * |I| > |P| > |B|

 * H.264 contains slices which split up the frame, more advanced

 * Audio is mature enough. Syncing is the only issue.

Format:

 * Flash video? Pretty much everywhere and interactive. But no 3D/VR
 * Some QT, WMV sites still exist.
 * TrueMotion On2 is patented, and probably illegal for GPL (Flash 7)
  * YouTube uses it for lower quality and older streams.
 * Lots of choices: video codec, resolution, bitrate, keyframes, audio codec

Scaling:

 * Easily parallelizable
 * Amazon EC2-type services are good, but per-CPU software licensing.

Free Tools:

 * H.264 is an open MPEG standard (Flash 9)
  * YouTube uses it for high quality streams
  * iPhone and AppleTV use it
 * FFmpeg/MEncoder/VLC has libavcodec for VP6, but licensing issues
  * Can't encode H.264
 * x264 can do H.264 but limited WRT commercial ones

Non-free Tools:

 * Flash Encoder: Not automatable
 * On2 FlixEngine: Some support for H.264. Good for On2
 * Rhozet Carbon Coder: Windows only. Good for H.264

Storage:

 * Files are huge so ops take time. Use checksums

Serving:

 * Streaming
  * Live feeds
  * Red5 is a Java FOSS implementation of RTMP used by Facebook

 * Progressive download
  * Used by a majority of large sites
  * Easy to set up
  * How to seek?
   * Serve FLV starting at a different point
   * Just add simple FLV preamble before seeking
   * mod_flvx for Apache "just works"

== Building a Visualization Language (9 - 10) ==

John Resig (Firebug, jQuery) presents a talk on Processing.js, his port of Processing to Canvas.

Canvas element:

 * JR hasn't tried much in terms of overlaying multiple canvases on top of one another
 * Review (just a raster, not scalable graphics)
 * Canvases can consume other canvases, images and videos (FF 3.1)

Processing:
 
 * Visualization language in Java, for 2D and 3D. Built by people at MIT
 * Many libraries (manipulate video, etc)
 * Strictly typed, very flat API. OpenGL-like (setup(), draw())
 * Primitive drawing very similar to canvas
 * Tons of samples on processing.org

Processing.js:

 * JR ported Processing to Processing.js
 * Isn't a large part of processing its main library? Yes but only the 2D drawing bits are supported.
 * How do you achieve the synchronization in the Youtube video at http://ejohn.org/apps/hero/ ? Youtube API gives constant callback

= Tuesday =

== Mobile Web Development (9 - 12) ==

Intro:

 * Tons of love for Apple (long eulogies for the iPhone)
 * All about context specific mobile sites
 * Uses his own product (leaflets) as the example of how to develop for mobile

Implementation:

 * Split CSS into multiple files so that it can be reused (overhead of multiple CSS files is negligible?)
 * Case study of using CSS3 to make small icons

 * CSS3 iPhone transforms run natively, turned into probably CoreAnimation calls on the device. Much faster than writing Javascript.
  * The idea is to set a CSS class or id on an element which has a -webkit-transition.
 * Mentioned SproutCore... mischaracterized it by suggesting that you don't write JS, but instead Ruby (!?)
 * Talked about Cappuccino too, no real verdict given

 * Multitouch on iPhone
  * 2.0 allows to keep tab bar positioned in the bottom of iPhone apps (because of extra callbacks)

Ads on Mobile:

 * Lots of ad providers, with iPhone specific ad solutions
 * Unsolved question: where to put ads?

Verdict: Overall I learned nothing new in this talk. It was a rehash of web development with too much iPhone fanboyism. Also it turns out I wasn't supposed to attend this session since I didn't sign up for the workshop part of the conference :)
